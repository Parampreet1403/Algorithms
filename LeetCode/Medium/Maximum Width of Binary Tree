/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        // Base case 
        if (root==nullptr) return 0;
        
        // Level Order 
        std::queue<pair<TreeNode*,int>> q;
        q.push(make_pair(root, 0));
        
        int maxWidth{};
        
        while(!q.empty())
        {
            int size = q.size();
            pair<TreeNode*, int> first = q.front();
            pair<TreeNode*, int> current;
 
            for(int i{}; i < size; i++)
            {
                current = q.front();
                q.pop();
                TreeNode* Node = current.first;
                int index = current.second - first.second; // Take distance to prevent overflow
                
                // LR
                if (Node->left != nullptr)
                    q.push(make_pair(Node->left, 2 * index + 1));

                if (Node->right != nullptr)
                    q.push(make_pair(Node->right, 2 * index + 2));
            
            }
            // Find the max
            maxWidth = std::max(maxWidth, current.second - first.second + 1);
        }
        
        return maxWidth;
    }
};
