/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        std::vector<string> result{};
        
        // Base Case
        if (root == nullptr) return result;
        
        string current_path = to_string(root->val);
        // Is this a leaf node?
        if (root->left == nullptr && root->right == nullptr) 
            result.push_back(current_path);
        
        // Traverse LR
        if (root->left != nullptr) helper(root->left, current_path, result);
        if (root->right != nullptr) helper(root->right, current_path, result);
        
        return result;
        
    }
    
    void helper(TreeNode* root, string current_path, vector<string> &result)
    {
        current_path += "->" + to_string(root->val);
        
        // Is this a leaf node
        if (root->left == nullptr && root->right == nullptr) 
        {
            result.push_back(current_path);
            return;
        }
        
        // Traverse LR
        if (root->left != nullptr) helper(root->left, current_path, result);
        if (root->right != nullptr) helper(root->right, current_path, result);
    }
};
