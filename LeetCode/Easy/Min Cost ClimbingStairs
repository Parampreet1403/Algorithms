class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
	// Dynamic Programming
	int prevPrevStep{};
	int prevStep{};

	for (int i = cost.size() - 1; i >= 0; i--)
	{
		int currentStep = cost[i] + std::min(prevPrevStep, prevStep);

		std::cout << "\ncurrentStep: " << currentStep << std::endl;
		std::cout << "prevPrevStep: " << prevPrevStep << std::endl;
		std::cout << "prevStep: " << prevStep << std::endl;

		prevPrevStep = prevStep;
		prevStep = currentStep;
	}

	return std::min(prevPrevStep, prevStep);}
};
