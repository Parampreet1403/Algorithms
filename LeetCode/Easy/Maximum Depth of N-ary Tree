/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int maxDepth(Node* root) {
        
        // Base case
        if (root == nullptr) return 0;
        int depth{};
        
        // Level Order
        std::queue<Node*> q;
        q.push(root);
        
        while(!q.empty())
        {
            int size = q.size();
            
            for (int i{}; i < size; i++) // Looping through each level
            {
                Node* current = q.front();
                for (auto child : current->children) // looping thorugh every child
                {
                    q.push(child);

                }
                    q.pop();
            }
            depth++; // increment depth every level

        }
        
        return depth;
    }
};
