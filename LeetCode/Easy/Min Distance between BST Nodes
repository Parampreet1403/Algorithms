/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    std::vector<int> tree{}; // Store the differences
    
public:
    int inOrder(TreeNode* root, int& min, int& prevNode) {
        if (root) {
            // Traverse with dfs
            // Check Left node
            inOrder(root->left, min, prevNode);
            
            // Find difference
            int n = abs(root->val - prevNode);
            
            // Only save if its smaller than our previous difference
            if (min > n) min = n;
            
            // Updating previous node
            prevNode = root->val;
            
            // Check right node 
            inOrder(root->right, min, prevNode);
                
        }
        // returning min difference
        return min;
        
    }
    
    int minDiffInBST(TreeNode* root) {
        int min = INT_MAX;
        int prev = INT_MAX;
        
        return inOrder(root, min, prev);
    }
};
