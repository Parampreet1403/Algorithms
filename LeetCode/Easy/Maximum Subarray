class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        // Base conditions
        if (nums.size() == 1) return nums[0];
        
        // Dynamic programming 
        std::vector<int> dp(nums.size() + 1);
        dp[0] = 0;
        dp[1] = nums[0];
        
        // -2, 1, -3, 4, -1, 2, 1, -5, 4
        
        // -2, 1, -2, 4, 3, 5, 6, 1, 5
        
        for (int i=2; i<= nums.size(); i++) {
            dp[i] = max(nums[i-1], dp[i-1] + nums[i-1]);
        }
            
        
    return *(std::max_element(dp.begin()+ 1, dp.end())); }
};
